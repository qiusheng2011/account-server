name: "服务级别测试"
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - beta
      - release
permissions:
  contents: read

concurrency:
  group: "${{ github.workflow }} @ ${{ github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ["ubuntu-latest"]
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    env:
      ACCOUNT_SERVER_MYSQL_DSN: "mysql+aiomysql://root:sdf4kpxcvawjdjsfklj4rklfe@127.0.0.1:3306/tts"
      ACCOUNT_SERVER_LOG_DIR: "./logs"
      ACCOUNT_SERVER_PORT: 8700
      ACCOUNT_SERVER_REDIS_DSN: "redis://localhost:6379"
      ACCOUNT_SERVER_TEST_REDIS_DSN: "redis://localhost:6379"
      ACCOUNT_WORKER_REDIS_DSN : "redis://localhost:6379"
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306:3306
        env:
          MYSQL_USER: testtts
          MYSQL_PASSWORD: sdf4kpxcvawjdjsfklj4rklfe
          # MYSQL_DATABASE: test_tts
          MYSQL_ROOT_PASSWORD: sdf4kpxcvawjdjsfklj4rklfe
          options: --name=mariadbtest --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
        volumes:
          - docker-entrypoint-initdb.d:/tmp/sql
      redisdb:
        # Docker Hub image
        image: redis
        ports:
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: init db table by sql
        run: |
          sudo apt install mariadb-client
          mariadb --protocol=tcp  -uroot  -psdf4kpxcvawjdjsfklj4rklfe  information_schema <./src/dbsql/init.sql

      - name: install python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: install test lib
        run: |
          sudo apt update
          sudo apt install apache2-utils
          pip install pytest
          pip install locust

      - name: install requirement.txt
        run: |
          cat requirements.txt
          pip install -r requirements.txt 

      - name: run test【测试】
        run: |
          mkdir logs
          pytest  tests/

      - name: run app server
        run: |
          nohup python src/main.py &
      # 待修复
      # - name: run performance test
      #   run: |
      #     python -m locust  -H http://127.0.0.1:8700 -f ./tests/apiperformance_test/locustfile.py --headless -u 10 -r 200 -t 1m
